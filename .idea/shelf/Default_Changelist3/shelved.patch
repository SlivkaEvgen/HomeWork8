Index: Default_Changelist.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Default_Changelist.patch b/Default_Changelist.patch
new file mode 100644
--- /dev/null	(date 1619517132075)
+++ b/Default_Changelist.patch	(date 1619517132075)
@@ -0,0 +1,22 @@
+Index: HomeWork8.iml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/HomeWork8.iml b/HomeWork8.iml
+new file mode 100644
+--- /dev/null	
++++ b/HomeWork8.iml	
+@@ -0,0 +1,11 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<module type="JAVA_MODULE" version="4">
++  <component name="NewModuleRootManager" inherit-compiler-output="true">
++    <exclude-output />
++    <content url="file://$MODULE_DIR$">
++      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
++    </content>
++    <orderEntry type="inheritedJdk" />
++    <orderEntry type="sourceFolder" forTests="false" />
++  </component>
++</module>
+\ No newline at end of file
Index: .idea/shelf/Default_Changelist/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Default_Changelist/shelved.patch b/.idea/shelf/Default_Changelist/shelved.patch
new file mode 100644
--- /dev/null	(date 1619516522065)
+++ b/.idea/shelf/Default_Changelist/shelved.patch	(date 1619516522065)
@@ -0,0 +1,466 @@
+Index: .idea/modules.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/modules.xml b/.idea/modules.xml
+new file mode 100644
+--- /dev/null	(date 1618226263871)
++++ b/.idea/modules.xml	(date 1618226263871)
+@@ -0,0 +1,8 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="ProjectModuleManager">
++    <modules>
++      <module fileurl="file://$PROJECT_DIR$/HomeWork8.iml" filepath="$PROJECT_DIR$/HomeWork8.iml" />
++    </modules>
++  </component>
++</project>
+\ No newline at end of file
+Index: .idea/vcs.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/vcs.xml b/.idea/vcs.xml
+new file mode 100644
+--- /dev/null	(date 1619516350869)
++++ b/.idea/vcs.xml	(date 1619516350869)
+@@ -0,0 +1,6 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="VcsDirectoryMappings">
++    <mapping directory="$PROJECT_DIR$" vcs="Git" />
++  </component>
++</project>
+\ No newline at end of file
+Index: .idea/.gitignore
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/.gitignore b/.idea/.gitignore
+new file mode 100644
+--- /dev/null	(date 1618226271360)
++++ b/.idea/.gitignore	(date 1618226271360)
+@@ -0,0 +1,3 @@
++# Default ignored files
++/shelf/
++/workspace.xml
+Index: HomeWork8.iml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/HomeWork8.iml b/HomeWork8.iml
+new file mode 100644
+--- /dev/null	(date 1618226263815)
++++ b/HomeWork8.iml	(date 1618226263815)
+@@ -0,0 +1,11 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<module type="JAVA_MODULE" version="4">
++  <component name="NewModuleRootManager" inherit-compiler-output="true">
++    <exclude-output />
++    <content url="file://$MODULE_DIR$">
++      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
++    </content>
++    <orderEntry type="inheritedJdk" />
++    <orderEntry type="sourceFolder" forTests="false" />
++  </component>
++</module>
+\ No newline at end of file
+Index: src/MyLinkedList/MyLinkedListTest.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/MyLinkedList/MyLinkedListTest.java b/src/MyLinkedList/MyLinkedListTest.java
+new file mode 100644
+--- /dev/null	(date 1619512927736)
++++ b/src/MyLinkedList/MyLinkedListTest.java	(date 1619512927736)
+@@ -0,0 +1,121 @@
++//package MyLinkedList;
++//
++//import MyArrayList.MyList1;
++//
++//public class MyLinkedListTest<E> implements MyList1<E> {
++//    private Node<E> first;
++//    private Node<E> last;
++//    private int size;
++//    private int index;
++//    private int i;
++//
++//    private static class Node<E> {
++//        E item;
++//        Node<E> next;
++//        Node<E> previous;
++//        int index;
++//
++//        Node(E item) {
++//            this.item = item;
++//            index++;
++//        }
++//    }
++//
++//    public void add(E element) {
++//        size++;
++//        index = size - 1;
++//        Node<E> node2 = new Node<>(element);
++//        if (first == null) {
++//            first = last = node2;
++//            return;
++//        }
++//        node2.previous = last;
++//        last = node2;
++//        node2.previous.next = node2;
++//        node2.index++;
++//    }
++//
++//    public void remove(int index) {
++//        Node<E> eNode = first;
++//
++//        if (index == 0) {
++//            first = eNode.next;
++//            first.previous = null;
++//            size--;
++//            return;
++//        }
++//        int i = 0;
++//        while (i != index - 1) {
++//            eNode = eNode.next;
++//            i++;
++//        }
++//        eNode.next = eNode.next.next;
++//        last = eNode;
++//        size--;
++//        int r = 0;
++//
++//    }
++//
++//    public void clear() {
++//        Node<E> dd = first;
++//        E result = first.item;
++//        for (int i = 0; i < size; i++) {
++//            if (i > 0) {
++//                this.first = this.last = null;
++//                dd = null;
++//                size = 0;
++//                index = 0;
++//            }
++//        }
++//    }
++//
++//    public E get(int index) {
++//        Node<E> eNode = first;
++//        E result = first.item;
++//        if (size == index) {
++//            result = last.item;
++//        }
++//        for (int i = 0; i < size; i++) {
++//            if (i == index) {
++//                result = eNode.item;
++//            }
++//            eNode = eNode.next;
++//        }
++//        return result;
++//    }
++//
++//    public int size() {
++//        return size;
++//    }
++//
++//    @Override
++//    public String toString() {
++//        Node<E> rezult = first;
++//        StringBuilder rezult1 = new StringBuilder();
++//        while (rezult != null) {
++//            rezult1.append(rezult.item);
++//            rezult = rezult.next;
++//        }
++//        return rezult1.toString();
++//    }
++//
++//    public static void main(String[] args) {
++//        MyLinkedListTest<Integer> item1 = new MyLinkedListTest<>();
++//        item1.add(1);
++//        item1.add(2);
++//        item1.add(3);
++//        item1.add(4);
++//        item1.add(5);
++//        System.out.println(item1);
++//        item1.remove(0);
++//        System.out.println(item1);
++//        item1.remove(0);
++//        System.out.println(item1);
++//        item1.remove(2);
++//        System.out.println(item1);
++//        item1.remove(0);
++//        System.out.println(item1);
++//
++//    }
++//}
++//
+Index: .idea/misc.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/misc.xml b/.idea/misc.xml
+new file mode 100644
+--- /dev/null	(date 1618226263853)
++++ b/.idea/misc.xml	(date 1618226263853)
+@@ -0,0 +1,6 @@
++<?xml version="1.0" encoding="UTF-8"?>
++<project version="4">
++  <component name="ProjectRootManager" version="2" languageLevel="JDK_14" default="false" project-jdk-name="15" project-jdk-type="JavaSDK">
++    <output url="file://$PROJECT_DIR$/out" />
++  </component>
++</project>
+\ No newline at end of file
+Index: src/MyArrayList/MyList1.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/MyArrayList/MyList1.java b/src/MyArrayList/MyList1.java
+new file mode 100644
+--- /dev/null	(date 1619508266807)
++++ b/src/MyArrayList/MyList1.java	(date 1619508266807)
+@@ -0,0 +1,9 @@
++package MyArrayList;
++
++public interface MyList1<E> {
++    void add(E element); //добавляет элемент в конец
++    void remove(int index); //удаляет элемент под индексом
++    void clear();           //очищает коллекцию
++    int size();             //возвращает размер коллекции
++    E get(int index);       //возвращает элемент под индексом
++}
+\ No newline at end of file
+Index: src/MyLinkedList/Main.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/MyLinkedList/Main.java b/src/MyLinkedList/Main.java
+new file mode 100644
+--- /dev/null	(date 1619513152961)
++++ b/src/MyLinkedList/Main.java	(date 1619513152961)
+@@ -0,0 +1,16 @@
++//package MyArrayList;
++//
++//class Main extends MyArrayList1 {
++//    public static <E> void main(String[] args) {
++//        MyArrayList1<E> temp = new MyArrayList1<>();
++//        temp.add(1);
++//        temp.add(2);
++//        temp.add(3);
++//        temp.add(4);
++//        //temp.clear();
++//        System.out.println(temp);
++//        System.out.println(temp.size());
++//        System.out.println(temp.get(2));
++//
++//    }
++//}
+\ No newline at end of file
+Index: src/MyArrayList/MyArrayList1.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/MyArrayList/MyArrayList1.java b/src/MyArrayList/MyArrayList1.java
+new file mode 100644
+--- /dev/null	(date 1619516167132)
++++ b/src/MyArrayList/MyArrayList1.java	(date 1619516167132)
+@@ -0,0 +1,79 @@
++package MyArrayList;
++
++import java.util.Arrays;
++
++class Main extends MyArrayList1 {
++    public static <T> void main(String[] args) {
++        MyArrayList1<Integer> temp = new MyArrayList1<>();
++        temp.add(1); //0
++        temp.add(2); //0
++        temp.add(3); //0
++        temp.add(4); //0
++        //temp.clear();
++        System.out.println(temp);
++        System.out.println(temp.size());
++        System.out.println(temp.get(2));
++    }
++}
++public class MyArrayList1<T> implements MyList1 {
++    private int size;
++    private Object[] array;
++    public MyArrayList1() {
++
++        array = new Object[10];
++    }
++    public MyArrayList1(Object[] array) {
++    }
++    @Override
++    public void add(Object element) {
++        if (size == array.length) {
++            Object[] newArray = new Object[array.length * 3 / 2 + 1];
++            System.arraycopy(array, 0, newArray, 0, array.length);
++            array = newArray;
++        }
++        array[size++] = element;
++    }
++    @Override
++    public void remove(int index) {
++        Object[] newArray = new Object[array.length - 1];
++        System.arraycopy(array, 0, newArray, 0, index);
++        System.arraycopy(array, index + 1, newArray, index, array.length - index - 1);
++        array = newArray;
++        size--;
++    }
++    @Override
++    public void clear() {
++        Object[] newArray = new Object[array.length - 1];
++        System.arraycopy(newArray, 0, array, 0, newArray.length);
++        size = 0;
++    }
++    @Override
++    public int size() {
++        return size;
++    }
++    @Override
++    public T get(int index) {
++        return (T) array[index];
++    }
++
++    @Override
++    public String toString() {
++        //Object[] newArray1 = new Object[array.length];
++        for (int i = 0; i < array.length; i++) {
++            if (array[i] == null) {
++                System.arraycopy(array, 0, array, 0, size);
++                array = array;
++                return Arrays.toString(array);
++            }
++        }
++        return Arrays.toString(array);
++    }
++// @Override
++    //public String toString() {
++//        Object[] newArray1 = new Object[size];
++//        System.arraycopy(array, 0, newArray1, 0, size);
++//        array = newArray1;
++//        return Arrays.toString(array);
++//    }
++}
++
+Index: src/MyQueue/MyQueueList.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/MyQueue/MyQueueList.java b/src/MyQueue/MyQueueList.java
+new file mode 100644
+--- /dev/null	(date 1619512927705)
++++ b/src/MyQueue/MyQueueList.java	(date 1619512927705)
+@@ -0,0 +1,81 @@
++//package MyQueue;
++//
++//import java.util.Arrays;
++//
++//public class MyQueueList<E> implements InterMyQueue<E>{
++//    public static <E>void main(String[] args) {
++//        MyQueueList<E>myQueueList = new MyQueueList<>();
++//myQueueList.add(1);
++//myQueueList.add(2);
++//myQueueList.add(3);
++//myQueueList.add(4);
++//myQueueList.add(5);
++//myQueueList.remove(0);
++//
++//System.out.println(myQueueList.size);
++//System.out.println(myQueueList);
++//
++//
++//
++//    }
++//    private int size;
++//    private Object[] array;
++//
++//    public MyQueueList(){
++//        size = 0;
++//        array = new Object[10];
++//
++//    }
++//
++//    @Override
++//    public void add(Object element) {
++//        if (size == array.length) {
++//            Object[] newArray = new Object[array.length * 3 / 2 + 1];
++//            System.arraycopy(array, 0, newArray, 0, array.length);
++//            array = newArray;
++//        }
++//        array[size++] = element;
++//    }
++//
++//    @Override
++//    public void remove(int index) { //удаляет по индексу
++//        Object[] newArray = new Object[array.length - 1];
++//        System.arraycopy(array, 0, newArray, 0, index);
++//        System.arraycopy(array, index + 1, newArray, index, array.length - index - 1);
++//        array = newArray;
++//        size--;
++//    }
++//
++//    @Override
++//    public void clear() { // очищает список
++//        Object[] newArray = new Object[array.length - 1];
++//        System.arraycopy(newArray, 0, array, 0, newArray.length);
++//        size = 0;
++//    }
++//
++//    @Override
++//    public int size() {
++//        return size;
++//    }
++//
++//    @Override
++//    public E peek() { // возвращает первый элемент
++//        return (E) array[0];
++//    }
++//
++//    @Override
++//    public void poll() {
++////        Object[] newArray = new Object[array.length - 1];
++////        System.arraycopy(array, 0, newArray, 0, index);
++////        System.arraycopy(array,  1, newArray, index, array.length - index - 1);
++////        array = newArray;
++////        size--;
++//    }
++//    @Override
++//    public String toString() {
++//        Object[] newArray = new Object[size];
++//        System.arraycopy(array, 0, newArray, 0, size);
++//        array = newArray;
++//        return Arrays.toString(array);
++//    }
++//}
+Index: src/MyQueue/InterMyQueue.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/MyQueue/InterMyQueue.java b/src/MyQueue/InterMyQueue.java
+new file mode 100644
+--- /dev/null	(date 1619512927780)
++++ b/src/MyQueue/InterMyQueue.java	(date 1619512927780)
+@@ -0,0 +1,10 @@
++//package MyQueue;
++//
++//public interface InterMyQueue<E> {
++//    void add(E element); //добавляет элемент в конец
++//    void remove(int index); //удаляет элемент под индексом
++//    void clear(); //очищает коллекцию
++//    int size(); //возвращает размер коллекции
++//    E peek(); //возвращает первый элемент в очереди (FIFO)
++//    void poll(); //возвращает первый элемент в очереди и удаляет его из коллекции
++//}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1619516738899)
+++ b/.idea/vcs.xml	(date 1619516738899)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1619516960960)
+++ b/.idea/misc.xml	(date 1619516960960)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_14" default="false" project-jdk-name="15" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1619516874105)
+++ b/.idea/.gitignore	(date 1619516874105)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1619516960927)
+++ b/.idea/modules.xml	(date 1619516960927)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/HomeWork8.iml" filepath="$PROJECT_DIR$/HomeWork8.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: src/MyLinkedList/MyLinkedListTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/MyLinkedList/MyLinkedListTest.java b/src/MyLinkedList/MyLinkedListTest.java
new file mode 100644
--- /dev/null	(date 1619516960949)
+++ b/src/MyLinkedList/MyLinkedListTest.java	(date 1619516960949)
@@ -0,0 +1,121 @@
+//package MyLinkedList;
+//
+//import MyArrayList.MyList1;
+//
+//public class MyLinkedListTest<E> implements MyList1<E> {
+//    private Node<E> first;
+//    private Node<E> last;
+//    private int size;
+//    private int index;
+//    private int i;
+//
+//    private static class Node<E> {
+//        E item;
+//        Node<E> next;
+//        Node<E> previous;
+//        int index;
+//
+//        Node(E item) {
+//            this.item = item;
+//            index++;
+//        }
+//    }
+//
+//    public void add(E element) {
+//        size++;
+//        index = size - 1;
+//        Node<E> node2 = new Node<>(element);
+//        if (first == null) {
+//            first = last = node2;
+//            return;
+//        }
+//        node2.previous = last;
+//        last = node2;
+//        node2.previous.next = node2;
+//        node2.index++;
+//    }
+//
+//    public void remove(int index) {
+//        Node<E> eNode = first;
+//
+//        if (index == 0) {
+//            first = eNode.next;
+//            first.previous = null;
+//            size--;
+//            return;
+//        }
+//        int i = 0;
+//        while (i != index - 1) {
+//            eNode = eNode.next;
+//            i++;
+//        }
+//        eNode.next = eNode.next.next;
+//        last = eNode;
+//        size--;
+//        int r = 0;
+//
+//    }
+//
+//    public void clear() {
+//        Node<E> dd = first;
+//        E result = first.item;
+//        for (int i = 0; i < size; i++) {
+//            if (i > 0) {
+//                this.first = this.last = null;
+//                dd = null;
+//                size = 0;
+//                index = 0;
+//            }
+//        }
+//    }
+//
+//    public E get(int index) {
+//        Node<E> eNode = first;
+//        E result = first.item;
+//        if (size == index) {
+//            result = last.item;
+//        }
+//        for (int i = 0; i < size; i++) {
+//            if (i == index) {
+//                result = eNode.item;
+//            }
+//            eNode = eNode.next;
+//        }
+//        return result;
+//    }
+//
+//    public int size() {
+//        return size;
+//    }
+//
+//    @Override
+//    public String toString() {
+//        Node<E> rezult = first;
+//        StringBuilder rezult1 = new StringBuilder();
+//        while (rezult != null) {
+//            rezult1.append(rezult.item);
+//            rezult = rezult.next;
+//        }
+//        return rezult1.toString();
+//    }
+//
+//    public static void main(String[] args) {
+//        MyLinkedListTest<Integer> item1 = new MyLinkedListTest<>();
+//        item1.add(1);
+//        item1.add(2);
+//        item1.add(3);
+//        item1.add(4);
+//        item1.add(5);
+//        System.out.println(item1);
+//        item1.remove(0);
+//        System.out.println(item1);
+//        item1.remove(0);
+//        System.out.println(item1);
+//        item1.remove(2);
+//        System.out.println(item1);
+//        item1.remove(0);
+//        System.out.println(item1);
+//
+//    }
+//}
+//
Index: HomeWork8.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HomeWork8.iml b/HomeWork8.iml
new file mode 100644
--- /dev/null	(date 1619516960942)
+++ b/HomeWork8.iml	(date 1619516960942)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/MyLinkedList/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/MyLinkedList/Main.java b/src/MyLinkedList/Main.java
new file mode 100644
--- /dev/null	(date 1619516960977)
+++ b/src/MyLinkedList/Main.java	(date 1619516960977)
@@ -0,0 +1,16 @@
+//package MyArrayList;
+//
+//class Main extends MyArrayList1 {
+//    public static <E> void main(String[] args) {
+//        MyArrayList1<E> temp = new MyArrayList1<>();
+//        temp.add(1);
+//        temp.add(2);
+//        temp.add(3);
+//        temp.add(4);
+//        //temp.clear();
+//        System.out.println(temp);
+//        System.out.println(temp.size());
+//        System.out.println(temp.get(2));
+//
+//    }
+//}
\ No newline at end of file
Index: src/MyArrayList/MyList1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/MyArrayList/MyList1.java b/src/MyArrayList/MyList1.java
new file mode 100644
--- /dev/null	(date 1619516960968)
+++ b/src/MyArrayList/MyList1.java	(date 1619516960968)
@@ -0,0 +1,9 @@
+package MyArrayList;
+
+public interface MyList1<E> {
+    void add(E element); //добавляет элемент в конец
+    void remove(int index); //удаляет элемент под индексом
+    void clear();           //очищает коллекцию
+    int size();             //возвращает размер коллекции
+    E get(int index);       //возвращает элемент под индексом
+}
\ No newline at end of file
Index: src/MyQueue/MyQueueList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/MyQueue/MyQueueList.java b/src/MyQueue/MyQueueList.java
new file mode 100644
--- /dev/null	(date 1619516960992)
+++ b/src/MyQueue/MyQueueList.java	(date 1619516960992)
@@ -0,0 +1,81 @@
+//package MyQueue;
+//
+//import java.util.Arrays;
+//
+//public class MyQueueList<E> implements InterMyQueue<E>{
+//    public static <E>void main(String[] args) {
+//        MyQueueList<E>myQueueList = new MyQueueList<>();
+//myQueueList.add(1);
+//myQueueList.add(2);
+//myQueueList.add(3);
+//myQueueList.add(4);
+//myQueueList.add(5);
+//myQueueList.remove(0);
+//
+//System.out.println(myQueueList.size);
+//System.out.println(myQueueList);
+//
+//
+//
+//    }
+//    private int size;
+//    private Object[] array;
+//
+//    public MyQueueList(){
+//        size = 0;
+//        array = new Object[10];
+//
+//    }
+//
+//    @Override
+//    public void add(Object element) {
+//        if (size == array.length) {
+//            Object[] newArray = new Object[array.length * 3 / 2 + 1];
+//            System.arraycopy(array, 0, newArray, 0, array.length);
+//            array = newArray;
+//        }
+//        array[size++] = element;
+//    }
+//
+//    @Override
+//    public void remove(int index) { //удаляет по индексу
+//        Object[] newArray = new Object[array.length - 1];
+//        System.arraycopy(array, 0, newArray, 0, index);
+//        System.arraycopy(array, index + 1, newArray, index, array.length - index - 1);
+//        array = newArray;
+//        size--;
+//    }
+//
+//    @Override
+//    public void clear() { // очищает список
+//        Object[] newArray = new Object[array.length - 1];
+//        System.arraycopy(newArray, 0, array, 0, newArray.length);
+//        size = 0;
+//    }
+//
+//    @Override
+//    public int size() {
+//        return size;
+//    }
+//
+//    @Override
+//    public E peek() { // возвращает первый элемент
+//        return (E) array[0];
+//    }
+//
+//    @Override
+//    public void poll() {
+////        Object[] newArray = new Object[array.length - 1];
+////        System.arraycopy(array, 0, newArray, 0, index);
+////        System.arraycopy(array,  1, newArray, index, array.length - index - 1);
+////        array = newArray;
+////        size--;
+//    }
+//    @Override
+//    public String toString() {
+//        Object[] newArray = new Object[size];
+//        System.arraycopy(array, 0, newArray, 0, size);
+//        array = newArray;
+//        return Arrays.toString(array);
+//    }
+//}
Index: src/MyArrayList/MyArrayList1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/MyArrayList/MyArrayList1.java b/src/MyArrayList/MyArrayList1.java
new file mode 100644
--- /dev/null	(date 1619516960984)
+++ b/src/MyArrayList/MyArrayList1.java	(date 1619516960984)
@@ -0,0 +1,79 @@
+package MyArrayList;
+
+import java.util.Arrays;
+
+class Main extends MyArrayList1 {
+    public static <T> void main(String[] args) {
+        MyArrayList1<Integer> temp = new MyArrayList1<>();
+        temp.add(1); //0
+        temp.add(2); //0
+        temp.add(3); //0
+        temp.add(4); //0
+        //temp.clear();
+        System.out.println(temp);
+        System.out.println(temp.size());
+        System.out.println(temp.get(2));
+    }
+}
+public class MyArrayList1<T> implements MyList1 {
+    private int size;
+    private Object[] array;
+    public MyArrayList1() {
+
+        array = new Object[10];
+    }
+    public MyArrayList1(Object[] array) {
+    }
+    @Override
+    public void add(Object element) {
+        if (size == array.length) {
+            Object[] newArray = new Object[array.length * 3 / 2 + 1];
+            System.arraycopy(array, 0, newArray, 0, array.length);
+            array = newArray;
+        }
+        array[size++] = element;
+    }
+    @Override
+    public void remove(int index) {
+        Object[] newArray = new Object[array.length - 1];
+        System.arraycopy(array, 0, newArray, 0, index);
+        System.arraycopy(array, index + 1, newArray, index, array.length - index - 1);
+        array = newArray;
+        size--;
+    }
+    @Override
+    public void clear() {
+        Object[] newArray = new Object[array.length - 1];
+        System.arraycopy(newArray, 0, array, 0, newArray.length);
+        size = 0;
+    }
+    @Override
+    public int size() {
+        return size;
+    }
+    @Override
+    public T get(int index) {
+        return (T) array[index];
+    }
+
+    @Override
+    public String toString() {
+        //Object[] newArray1 = new Object[array.length];
+        for (int i = 0; i < array.length; i++) {
+            if (array[i] == null) {
+                System.arraycopy(array, 0, array, 0, size);
+                array = array;
+                return Arrays.toString(array);
+            }
+        }
+        return Arrays.toString(array);
+    }
+// @Override
+    //public String toString() {
+//        Object[] newArray1 = new Object[size];
+//        System.arraycopy(array, 0, newArray1, 0, size);
+//        array = newArray1;
+//        return Arrays.toString(array);
+//    }
+}
+
Index: src/MyQueue/InterMyQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/MyQueue/InterMyQueue.java b/src/MyQueue/InterMyQueue.java
new file mode 100644
--- /dev/null	(date 1619516960998)
+++ b/src/MyQueue/InterMyQueue.java	(date 1619516960998)
@@ -0,0 +1,10 @@
+//package MyQueue;
+//
+//public interface InterMyQueue<E> {
+//    void add(E element); //добавляет элемент в конец
+//    void remove(int index); //удаляет элемент под индексом
+//    void clear(); //очищает коллекцию
+//    int size(); //возвращает размер коллекции
+//    E peek(); //возвращает первый элемент в очереди (FIFO)
+//    void poll(); //возвращает первый элемент в очереди и удаляет его из коллекции
+//}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1619517134321)
+++ b/.idea/workspace.xml	(date 1619517134321)
@@ -0,0 +1,165 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ChangeListManager">
+    <list default="true" id="f08cfde9-532c-4dab-bbc7-8f608e391742" name="Default Changelist" comment="ff">
+      <change afterPath="$PROJECT_DIR$/.idea/.gitignore" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Default_Changelist/Main.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Default_Changelist/MyArrayList1.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Default_Changelist/MyList1.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/shelf/Default_Changelist/shelved.patch" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/HomeWork8.iml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/out/production/HomeWork8/MyArrayList/Main.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/out/production/HomeWork8/MyArrayList/MyArrayList1.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/out/production/HomeWork8/MyArrayList/MyList1.class" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/MyArrayList/MyArrayList1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/MyArrayList/MyList1.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/MyLinkedList/Main.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/MyLinkedList/MyLinkedListTest.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/MyQueue/InterMyQueue.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/MyQueue/MyQueueList.java" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Interface" />
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
+  </component>
+  <component name="ProjectId" id="1r4D2TXviGfyAUYJC847rdyAcqF" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent">
+    <property name="ASKED_SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
+    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
+    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
+    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
+    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
+  </component>
+  <component name="RecentsManager">
+    <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\1\IdeaProjects\HomeWork8\src\MyLinkedList" />
+    </key>
+  </component>
+  <component name="RunManager" selected="Application.Main">
+    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="MyArrayList.Main" />
+      <module name="HomeWork8" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="MyArrayList.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="MyArrayList" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="MyArrayList.MyArrayList" />
+      <module name="HomeWork8" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="MyArrayList.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="MyLinkedListTest" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="MyLinkedList.MyLinkedListTest" />
+      <module name="HomeWork8" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="MyLinkedList.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="MyQueueList" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="MyQueue.MyQueueList" />
+      <module name="HomeWork8" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="MyQueue.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.Main" />
+        <item itemvalue="Application.MyQueueList" />
+        <item itemvalue="Application.MyLinkedListTest" />
+        <item itemvalue="Application.MyArrayList" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="f08cfde9-532c-4dab-bbc7-8f608e391742" name="Default Changelist" comment="" />
+      <created>1618226263232</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1618226263232</updated>
+    </task>
+    <servers />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="ff" />
+    <option name="LAST_COMMIT_MESSAGE" value="ff" />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints-dialog>
+        <breakpoints-dialog>
+          <selected-grouping-rules>
+            <grouping-rule id="XBreakpointGroupingByClassRule" />
+            <grouping-rule id="XBreakpointGroupingByPackageRule" />
+            <grouping-rule id="by-file" />
+          </selected-grouping-rules>
+        </breakpoints-dialog>
+      </breakpoints-dialog>
+      <default-breakpoints>
+        <breakpoint enabled="true" type="java-exception" />
+      </default-breakpoints>
+    </breakpoint-manager>
+  </component>
+</project>
\ No newline at end of file
